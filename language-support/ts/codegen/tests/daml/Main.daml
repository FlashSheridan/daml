-- Copyright (c) 2020 The DAML Authors. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0
daml 1.2
module Main where

import DA.TextMap
import Lib.Mod


template AllTypes with
    unit: ()
    bool: Bool
    int: Int
    text: Text
    date: Date
    time: Time
    party: Party
    contractId: ContractId Person
    optional: Optional Int
    list: [Bool]
    textMap: TextMap Int
    monoRecord: Person
    polyRecord: Pair Int Text
    imported: Imported
    archiveX: Archive
    either: Either Int Text
    tuple: (Int, Text)
    enum: Color
    enumList: [Color]
    variant: Expr Int
    sumProd : Quux
    parametericSumProd : Expr2 Int
  where
    signatory party

template Person with
    name: Text
    party: Party
    age: Int
  where
    signatory party

    key (party, age): (Party, Int)
    maintainer key._1

    choice Birthday: ContractId Person
      controller party
      do
        create this with age = age+1

data Pair a b = Pair {
  one: a;
  two: b
} deriving (Eq, Show)

data Bar a = Bar {
  u: a
}
data Foo a b = Foo {
  x: Bar a;
  y: Foo b a;
  z: b
}

data Expr a =
    Lit a
  | Var Text
  | Add (Expr a, Expr a)
  deriving (Show, Eq)

data Expr2 a =
    Lit2 a
  | Var2 Text
  | Add2 {lhs : Expr2 a, rhs: Expr2 a}
  deriving (Show, Eq)

data Color = Red | Blue | Yellow deriving (Eq, Show)

data Quux =
    Corge { x: Int, y: Text }
  | Grault { z: Bool }
  deriving (Show, Eq)


data OptRec = OptRec
  { orDirect: Optional Text
  , orNested: Optional (Optional Int)
  }
  deriving (Eq, Show)

data OptVar a =
    ODirect (Optional Int)
  | ONested (Optional (Optional Text))
  | OPoly a
  | OPolyNested (Optional a)
  deriving (Eq, Show)

template Opt with
    owner: Party
    oDirect: Optional Int
    oRec: [OptRec]
    oVarInt: [OptVar Int]
    oVarOpt: [OptVar (Optional Int)]
    oList: [Optional Int]
    oListOpt3: [Optional (Optional (Optional Int))]
  where
    signatory owner

test = scenario do
  owner <- getParty "Alice"
  let opt = Opt
        { owner
        , oDirect = None
        , oRec = [OptRec None None, OptRec (Some "abc") (Some None), OptRec (Some "") (Some (Some 1))]
        , oVarInt = [ODirect None, ODirect (Some 1), ONested None, ONested (Some None), ONested (Some (Some "abc")), OPoly 1, OPolyNested None, OPolyNested (Some 1)]
        , oVarOpt = [OPoly None, OPoly (Some 0), OPolyNested None, OPolyNested (Some None), OPolyNested (Some (Some 17))]
        , oList = [None, Some 5]
        , oListOpt3 = [None, Some None, Some (Some None), Some (Some (Some 1))]
        }
  submit owner do create opt
